#pragma kernel FindEdges
//#pragma kernel MakeSurface

struct Voxel {
	float Density;
};

struct Edge {
	int Index1;
	int Index2;
};

float3 Size;
StructuredBuffer<Voxel> Voxels;
RWStructuredBuffer<float3> FeaturePoints;

int GetIndex(uint3 position) {
	return (int)(Size.z * position.z + position.y * (Size.x * Size.z) + position.x);
}

float3 GetPosition(int index) {
	return float3(
		(int)(index % Size.z),
		(int)(index / (Size.x * Size.z)),
		(int)(index % (Size.x * Size.z) / Size.z)
		);
}

float Sign(float value) {
	return value > 0 ? 1 : value < 0 ? -1 : 0;
}

float3 Lerp(float3 v0, float3 v1, float t) {
	return (1 - t) * v0 + t * v1;
}

float InverseLerp(float a, float b, float t) {
	if (a != b)
		return (t - a) / (b - a);
	return 0;
}

[numthreads(1, 1, 1)]
void FindEdges(uint3 position : SV_DispatchThreadID)
{
	float3 featurePoint = float3(0, 0, 0);

	int indices[8] = {
		GetIndex(position),
		GetIndex(position + float3(0,0,1)),
		GetIndex(position + float3(0,1,0)),
		GetIndex(position + float3(0,1,1)),

		GetIndex(position + float3(1,0,0)),
		GetIndex(position + float3(1,0,1)),
		GetIndex(position + float3(1,1,0)),
		GetIndex(position + float3(1,1,1))
	};

	Edge edges[12] = {
		{ 0, 1 },
		{ 0, 2 },
		{ 0, 3 },
		{ 1, 3 },

		{ 1, 5 },
		{ 2, 3 },
		{ 2, 6 },
		{ 4, 4 },

		{ 4, 6 },
		{ 3, 7 },
		{ 6, 7 },
		{ 5, 7 }
	};

	int edgeCrossings = 0;

	for (int i = 0; i < 12; i++)
	{
		int index1 = indices[edges[i].Index1];
		int index2 = indices[edges[i].Index2];
		uint3 position1 = GetPosition(index1);
		uint3 position2 = GetPosition(index2);
		float density1 = Voxels[index1].Density;
		float density2 = Voxels[index2].Density;

		if (Sign(density1) == Sign(density2))
		{
			continue;
		}

		featurePoint += Lerp(position1, position2, InverseLerp(density1, density2, 0));
		edgeCrossings++;
	}

	if (edgeCrossings > 0) {
		featurePoint /= edgeCrossings;
	}

	FeaturePoints[GetIndex(position)] = featurePoint;
}


/*

AppendStructuredBuffer<float3> Vertices;
int VerticesIndex;

AppendStructuredBuffer<int> Tris;

[numthreads(1, 1, 1)]
void MakeSurface(uint3 position : SV_DispatchThreadID) {
	float3 k0 = position;
	float3 k1 = k0 + float3(1, 0, 0);
	float3 k2 = k0 + float3(1, 0, 1);
	float3 k3 = k0 + float3(0, 0, 1);

	float3 value0 = FeaturePoints[GetIndex(k0)];
	float3 value1 = FeaturePoints[GetIndex(k1)];
	float3 value2 = FeaturePoints[GetIndex(k2)];
	float3 value3 = FeaturePoints[GetIndex(k3)];

	if (GetIndex(value0) != 0 &&
		GetIndex(value1) != 0 &&
		GetIndex(value2) != 0 &&
		GetIndex(value3) != 0) {

		Vertices.Append(value0);
		Vertices.Append(value1);
		Vertices.Append(value2);
		Vertices.Append(value3);

		Tris.Append(VerticesIndex - 4);
		Tris.Append(VerticesIndex - 3);
		Tris.Append(VerticesIndex - 2);

		Tris.Append(VerticesIndex - 2);
		Tris.Append(VerticesIndex - 1);
		Tris.Append(VerticesIndex - 4);
	}
}

*/
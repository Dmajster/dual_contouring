#pragma kernel FindFeaturePoints
#pragma kernel FindVertices
#pragma kernel FindIndices

struct Voxel {
	float Density;
};

struct Edge {
	int Index1;
	int Index2;
};

float3 Size;
StructuredBuffer<Voxel> Voxels;


int GetIndex(float3 position) {
	return (int)(Size.z * position.z + position.y * (Size.x * Size.z) + position.x);
}

float3 GetPosition(int index) {
	return float3(
		(int)(index % Size.z),
		(int)(index / (Size.x * Size.z)),
		(int)(index % (Size.x * Size.z) / Size.z)
	);
}

float Sign(float value) {
	if( value > 0 ){
		return 1;
	} else if ( value < 0 ){
		return -1;
	} else {
		return 0;
	}
}

float3 Lerp(float3 v0, float3 v1, float t) {
	return (1 - t) * v0 + t * v1;
}

float InverseLerp(float a, float b, float t) {
	if (a != b)
		return (t - a) / (b - a);
	return 0;
}


RWStructuredBuffer<float3> FeaturePoints;

[numthreads(1, 1, 1)]
void FindFeaturePoints(uint3 position : SV_DispatchThreadID)
{
    if (position.x + 1 >= Size.x || position.y + 1 >= Size.y || position.z + 1 >= Size.z)
    {
        return;
    }

	float3 featurePoint = float3(0, 0, 0);
	int edgeCrossings = 0;

	int indices[8] = {
		GetIndex(position),
		GetIndex(position + float3(0,0,1)),
		GetIndex(position + float3(0,1,0)),
		GetIndex(position + float3(0,1,1)),

		GetIndex(position + float3(1,0,0)),
		GetIndex(position + float3(1,0,1)),
		GetIndex(position + float3(1,1,0)),
		GetIndex(position + float3(1,1,1))
	};

	Edge edges[12] = {
		{ 0, 1 },
		{ 0, 2 },
		{ 0, 4 },
		{ 1, 3 },

		{ 1, 5 },
		{ 2, 3 },
		{ 2, 6 },
		{ 4, 5 },

		{ 4, 6 },
		{ 3, 7 },
		{ 6, 7 },
		{ 5, 7 }
	};

	for (int i = 0; i < 12; i++)
	{
		int index1 = indices[edges[i].Index1];
		int index2 = indices[edges[i].Index2];
		float3 position1 = GetPosition(index1);
		float3 position2 = GetPosition(index2);
		float density1 = Voxels[index1].Density;
		float density2 = Voxels[index2].Density;

		if (Sign(density1) == Sign(density2))
		{
			continue;
		}

		featurePoint += Lerp(position1, position2, InverseLerp(density1, density2, 0));
		edgeCrossings++;
	}

	if (edgeCrossings > 0) {
		featurePoint /= edgeCrossings;
	}

	FeaturePoints[GetIndex(position)] = featurePoint;
}


struct QuadVertices {
	float3 vertice1;
	float3 vertice2;
	float3 vertice3;
	float3 vertice4;
};

AppendStructuredBuffer<QuadVertices> Quads;

[numthreads(1, 1, 1)]
void FindVertices(uint3 position : SV_DispatchThreadID) {
	float3 k0 = position;
	float3 k1 = k0 + float3(1, 0, 0);
	float3 k2 = k0 + float3(1, 0, 1);
	float3 k3 = k0 + float3(0, 0, 1);

	float3 value0 = FeaturePoints[GetIndex(k0)];
	float3 value1 = FeaturePoints[GetIndex(k1)];
	float3 value2 = FeaturePoints[GetIndex(k2)];
	float3 value3 = FeaturePoints[GetIndex(k3)];

	if (value0.x != 0 && value0.y != 0 && value0.z != 0 &&
		value1.x != 0 && value1.y != 0 && value1.z != 0 &&
		value2.x != 0 && value2.y != 0 && value2.z != 0 &&
		value3.x != 0 && value3.y != 0 && value3.z != 0 ){

		QuadVertices newQuad = {
			value0,
			value1,
			value2,
			value3
		};

		Quads.Append(newQuad);
	} 


	k1 = k0 + float3(0, 1, 0);
	k2 = k0 + float3(1, 1, 0);
	k3 = k0 + float3(1, 0, 0);

	value0 = FeaturePoints[GetIndex(k0)];
	value1 = FeaturePoints[GetIndex(k1)];
	value2 = FeaturePoints[GetIndex(k2)];
	value3 = FeaturePoints[GetIndex(k3)];

	if (value0.x != 0 && value0.y != 0 && value0.z != 0 &&
		value1.x != 0 && value1.y != 0 && value1.z != 0 &&
		value2.x != 0 && value2.y != 0 && value2.z != 0 &&
		value3.x != 0 && value3.y != 0 && value3.z != 0 ){

		QuadVertices newQuad = {
			value0,
			value1,
			value2,
			value3
		};

		Quads.Append(newQuad);
	} 

	k1 = k0 + float3(0, 0, 1);
	k2 = k0 + float3(0, 1, 1);
	k3 = k0 + float3(0, 1, 0);

	value0 = FeaturePoints[GetIndex(k0)];
	value1 = FeaturePoints[GetIndex(k1)];
	value2 = FeaturePoints[GetIndex(k2)];
	value3 = FeaturePoints[GetIndex(k3)];

	if (value0.x != 0 && value0.y != 0 && value0.z != 0 &&
		value1.x != 0 && value1.y != 0 && value1.z != 0 &&
		value2.x != 0 && value2.y != 0 && value2.z != 0 &&
		value3.x != 0 && value3.y != 0 && value3.z != 0 ){

		QuadVertices newQuad = {
			value0,
			value1,
			value2,
			value3
		};

		Quads.Append(newQuad);
	} 
}


struct QuadIndices {
	int Index1;
	int Index2;
	int Index3;
	int Index4;
	int Index5;
	int Index6;
};

RWStructuredBuffer<QuadIndices> Indices;

[numthreads(1, 1, 1)]
void FindIndices(uint3 position : SV_DispatchThreadID) {
	int index = position.x * 4;

	QuadIndices newIndices = {
			index,
			index+1,
			index+2,
			index+2,
			index+3,
			index
	};

	Indices[position.x] = newIndices;
}